// Versionado em https://github.com/JoaozinhoDrgnBr/Posto-de-Gasolina.git

#include <stdio.h>
#include <stdlib.h>
#define BLK "\e[0;30m"
#define RED "\e[0;31m"
#define GRN "\e[0;32m"
#define YEL "\e[0;33m"
#define BLU "\e[0;34m"
#define MAG "\e[0;35m"
#define CYN "\e[0;36m"
#define WHT "\e[0;37m"

struct tipocarro {
  int ano;
  char marca[15], modelo[15];
} *fcarro, *atendidos;

// void addcarro(int fila, int *carro);
// void menu2(float vend, float preco, int atend, float armaz, int flag2,
//            struct tipocarro atendidos);

int main(void) {
  float preco, armaz = 0, vend = 0, i;
  // i=para armazenar quantos litros serão abastecidos em um carro
  // j=usado como contador para whiles
  int fila, carro = 0, flag, flag2, atend = 0, j;
  // flags = escolhas para menus
  char ignor[2]; // apenas pra ser ignorado

  printf("Programa por: João Otávio Bazzo Zimermann\n");
  printf("Este programa foi criado com o proposito de gerenciar um posto de "
         "gasolina\nhipotetico\n\n");

  printf("Informe o valor do combustivel:\n");
  scanf("%f", &preco);
  printf("Informe o tamanho da fila suportada:\n");
  scanf("%d", &fila);
  fcarro=calloc(fila, sizeof(struct tipocarro));
  printf("Informe a quantidade de combustivel armazenado:\n");
  scanf("%f", &armaz);

  while (flag != 5) {
    flag2 = 0;
    // resetando a variavel, estava permanecendo 6 e não entrando em relatórios
    // novamente
    printf("\e[1;1H\e[2J");
    // system("clear");
    printf(WHT
           "\nSelecione a opção:\n1. Adicionar carro a fila\n2. Abastecer\n3. "
           "Exibir fila de espera\n4. Relatórios\n5. Encerrar\n");
    scanf("%d", &flag);
    printf("\n");

    switch (flag) {
    case 1:
      if (carro < fila) {
        carro = carro + 1;

        fgets(ignor, 2, stdin);
        fflush(stdin);
        printf(WHT "Informe a marca do carro:\n");
        fgets(fcarro[carro - 1].marca, 15, stdin);
        printf("Informe o modelo do carro:\n");
        fgets(fcarro[carro - 1].modelo, 15, stdin);
        printf("Informe o ano do carro:\n");
        scanf("%d", &fcarro[carro - 1].ano);
        printf(GRN "Carro adicionado\n");

      } else {
        printf(RED "A fila está em capacidade máxima\n");
      }

      break;
    case 2:
      if (armaz <= 0) {
        printf("Não há mais combustivel nas bombas, carros serão liberados\n");
        carro = 0;
      } else if (carro > 0) {
        printf("Informe quanto combustivel será abastecido:\n");
        scanf("%f", &i);
        if (i > armaz) {
          printf("Combustivel informado excede ao restante na bomba: "
                 "%.3f\nCarro será liberado\n",
                 armaz);
          --carro;
          j = 0;
          while (j < carro) {
            strcpy(fcarro[j].marca, fcarro[j + 1].marca);
            strcpy(fcarro[j].modelo, fcarro[j + 1].modelo);
            fcarro[j].ano = fcarro[j + 1].ano;
            j++;
          }
        } else {
          --carro;
          atendidos=(struct tipocarro *) realloc (atendidos , (atend+1) * sizeof(struct tipocarro));
          strcpy(atendidos[atend].marca, fcarro[0].marca);
          strcpy(atendidos[atend].modelo, fcarro[0].modelo);
          atendidos[atend].ano = fcarro[0].ano;
          atend++;
          j = 0;
          while (j < carro) {
            strcpy(fcarro[j].marca, fcarro[j + 1].marca);
            strcpy(fcarro[j].modelo, fcarro[j + 1].modelo);
            fcarro[j].ano = fcarro[j + 1].ano;
            j++;
          }
          armaz = armaz - i;
          vend = vend + i;
          printf(GRN "Carro abastecido\n" WHT);
        }
      } else {
        printf(RED "Não há carros para abastecer" WHT);
      }
      break;
    case 3:
      j = 0;
      printf("A quantidade de carros na fila é de: %d\n\n", carro);
      while (j < carro) {
        printf("%s%s%d\n\n", fcarro[j].marca, fcarro[j].modelo, fcarro[j].ano);
        j++;
      }
      break;
    case 4:
      while (flag2 != 6) {
        printf("\e[1;1H\e[2J");
        printf(
            WHT
            "\nInforme a opção:\n1. Quantidade de litros vendida\n2. Valor "
            "arrecadado\n3. Quantidade "
            "de carros abastecidos\n4. Quantidade de combustivel restante\n5. "
            "Gerar arquivo para impressão\n6. Voltar ao menu anterior\n");
        scanf("%d", &flag2);
        printf("\n");
        switch (flag2) {
        case 1:
          printf("%.2f litros foram vendidos\n", vend);
          break;
        case 2:
          printf("R$%.2f foram arrecadados\n", vend * preco);
          break;
        case 3:
          j = 0;
          printf("%d carros foram abastecidos\n\n", atend);
          while (j < atend) {
            printf("%s%s%d\n\n", atendidos[j].marca, atendidos[j].modelo,
                   atendidos[j].ano);
            j++;
          }
          break;
        case 4:
          printf("%.2f de combustivel restam no tanque\n", armaz);
          break;
        case 5:
          printf(YEL "Arquivo sendo gerado...\n");
          break;
        case 6:
          printf(YEL "Voltando...\n");
          break;
        default:
          printf(RED "Opção inválida\n");
          break;
        }
        printf(WHT "\nPressione qualquer tecla para continuar:");
        getchar();
        getchar();
      }
      break;
    case 5:
      printf(YEL "Encerrando...");
      exit(0);
      break;
    default:
      printf(RED "Intrução inválida\n");
      break;
    }
    printf(WHT "\nPressione qualquer tecla para continuar:");
    getchar();
    getchar();
  }

  return 0;
}
